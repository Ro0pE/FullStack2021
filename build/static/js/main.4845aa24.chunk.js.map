{"version":3,"sources":["services/persons.js","components/Clear.js","components/Filter.js","components/AddPerson.js","components/Person.js","components/ErrorNotification.js","components/SuccesfullNotification.js","App.js","index.js"],"names":["baseUrl","id","personObject","axios","put","then","response","data","delete","post","Clear","props","persons","type","onClick","testi","length","i","personService","Filter","setFilter","onChange","event","target","value","AddPerson","newPerson","newNumber","setPersons","setNewPerson","setNewNumber","setSuccesfullOperation","onSubmit","name","number","listalla","message","result","window","confirm","console","log","person","find","n","updatedPerson","returnedPerson","map","concat","catch","error","setTimeout","Person","setErrorMessage","deletePerson","newList","filter","deletedPerson","personsToShow","toLowerCase","includes","newFilter","tyyppi","className","bind","ErrorNotification","SuccesfullNotification","App","useState","errorMessage","succesfullOperation","useEffect","get","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.4845aa24.chunk.js","sourcesContent":["\r\nimport axios from 'axios'\r\nconst baseUrl = '/api/persons'\r\n\r\nconst getAll = () => {\r\n    const request = axios.get(baseUrl)\r\n    return request.then(response => response.data)\r\n  }\r\nconst addPerson = (personObject) => {\r\n      const request = axios.post(baseUrl, personObject)\r\n      return request.then(response => response.data)     \r\n  }\r\nconst updateNumber = (id, personObject) => {\r\n    const request = axios.put(`${baseUrl}/${id}`,personObject)  \r\n    return request.then(response => response.data)\r\n  }\r\nconst deletePerson = (id) => {\r\n    const request = axios.delete(`${baseUrl}/${id}`) \r\n    return request.then(response => response.data)\r\n  }\r\n\r\n\r\n\r\n  // eslint-disable-next-line import/no-anonymous-default-export\r\n  export default   { getAll, updateNumber, deletePerson, addPerson } \r\n\r\n","import personService from '../services/persons'\r\n\r\n\r\n\r\n\r\nconst Clear = (props) => {\r\n  \r\nconst persons = props.persons\r\n\r\n\r\n\r\n\r\n  // TÄMÄ EI TOIMI VIELÄ!! id on eri kuin i ja kun poistaa yhden kerrallaan niin jää \"tyhjiä\" paikkoja\r\n  const deleteAll = () => {\r\n    const testi = persons.length\r\n    for (let  i = 1; i <= testi; i++){\r\n    \r\n    personService\r\n    .deletePerson(i)\r\n\r\n  }\r\n\r\n}\r\n  \r\n\r\n\r\n\r\n  return (\r\n    <>\r\n    <button type=\"submit\" onClick = {deleteAll}>Clear phonebook!</button>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Clear","const Filter = (props) => {\r\n\r\n\r\n\r\n   const setFilter = props.setFilter\r\n  \r\n\r\n    \r\n    const setFilterValue = (event) => {  // aseta filtterin value\r\n      setFilter(event.target.value)\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n             Filter shown with: <input onChange={setFilterValue}/> \r\n        </div>\r\n    )\r\n\r\n\r\n\r\n\r\n}\r\n\r\nexport default Filter","import personService from '../services/persons'\r\n\r\nconst AddPerson = (props) => {\r\n  \r\n    const newPerson = props.newPerson\r\n    const newNumber = props.newNumber\r\n    const persons = props.persons\r\n    const setPersons = props.setPersons\r\n    const setNewPerson = props.setNewPerson\r\n    const setNewNumber = props.setNewNumber\r\n    const setSuccesfullOperation = props.setSuccesfullOperation\r\n  \r\n\r\n   \r\n\r\n    const add = () => {   // lisätään henkilö, nimi,numero ja id\r\n       \r\n        const personObject = {  // uutta objektia tuosta\r\n          name: newPerson,\r\n          number: newNumber, \r\n\r\n        }\r\n\r\n\r\n\r\n\r\n        \r\n        var listalla = false;  // \r\n\r\n        \r\n        for (let  i = 0; i < persons.length; i++){\r\n\r\n         if (!(persons[i].name === personObject.name)){  // tutkitaan, onko henkilö jo puhelinluettelossa. Jos ei, niin lisätään ja jos on niin alerttia perään\r\n           listalla = false;\r\n       \r\n         } else {\r\n           if (typeof(personObject.name) !== 'undefined'){              \r\n           listalla = true;\r\n           let message = `Person ${personObject.name} is already added to phonebook, replace the old number with a new one?`\r\n           let result = window.confirm(message)      \r\n           if (result === true){ /// kun halutaan päivittää numero eli klikataan ok\r\n            console.log('listalla olevan id', persons[i].id)\r\n         \r\n            const person = persons.find(n=> n.id === persons[i].id)\r\n            const updatedPerson =  {...person, number: newNumber}\r\n            console.log('udpated perset : ' , updatedPerson)\r\n            \r\n            \r\n           /* personService\r\n            .addPerson(personObject)\r\n            .then(response => {\r\n             setPersons(persons.concat(response))\r\n            })\r\n            */\r\n\r\n            personService   // päivitetään databasen tieto\r\n             .updateNumber(persons[i].id, updatedPerson)\r\n             .then(returnedPerson => {\r\n              setPersons(persons.map(person => person.id !== persons[i].id ? person : returnedPerson))\r\n            })\r\n         \r\n           }\r\n          \r\n           if (result === false){\r\n            \r\n           }\r\n     \r\n         }\r\n        }\r\n      \r\n        }\r\n       \r\n        \r\n        if (!(listalla === true)){\r\n\r\n          if (typeof(personObject.name) !== 'undefined'){\r\n             personService    \r\n             .addPerson(personObject)\r\n             .then(response => {\r\n              setPersons(persons.concat(response))\r\n             })\r\n             .catch(error =>{\r\n               console.log('VIRHGE PKRL')\r\n               console.log(error.response.data)\r\n             })\r\n\r\n             setSuccesfullOperation(`Added ${personObject.name} `) \r\n             setTimeout(() => {\r\n               setSuccesfullOperation(null)\r\n             }, 2000)\r\n       \r\n            } \r\n        }\r\n    \r\n        listalla = false;\r\n      \r\n      }\r\n    \r\n      const handleAddPerson = (event) => {  // lisää henkilölle nimi\r\n\r\n        if (event.target.value.length > 0){\r\n\r\n          setNewPerson(event.target.value)\r\n        } \r\n      \r\n     \r\n      }\r\n      \r\n      const handleAddNumber = (event) => {  // lisää henkilölle numero\r\n       \r\n        setNewNumber(event.target.value)\r\n     \r\n      }\r\n      \r\n\r\n    return (\r\n        <form onSubmit = {add}>\r\n        <div>\r\n          <p>Name: <input onChange={handleAddPerson}/></p> \r\n          <p>Number: <input onChange={handleAddNumber}/></p>\r\n          <button type=\"submit\">Add</button>\r\n        </div>\r\n        <ul>\r\n\r\n        </ul>\r\n      </form>\r\n\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default AddPerson","import personService from '../services/persons'\r\n\r\nconst Person = (props) => {  // printtaa henkilöt ja niiden numerot\r\n    const setErrorMessage = props.setErrorMessage\r\n    const persons = props.persons\r\n\r\n\r\n    const deletePerson = (id) => {\r\n      const person = persons.find(n => n.id === id)\r\n      if (typeof(id) !== 'undefined') {\r\n      const newList = props.persons.filter((person) => person.id !== id);\r\n      \r\n\r\n      personService\r\n      .deletePerson(id)\r\n      .then(deletedPerson => {\r\n        props.setPersons(newList)\r\n    \r\n      })\r\n      .catch(error => {\r\n        setErrorMessage(\r\n          `Information of '${person.name}' has already been removed from server`\r\n        )\r\n        setTimeout(() => {\r\n          setErrorMessage(null)\r\n        }, 5000)\r\n      })    \r\n\r\n    } \r\n      \r\n    }\r\n    \r\n    const personsToShow = false     // filtteröidään, joko näytetään kaikki, tai näytetään filtteröity lista > person.name sisältää (filtterin setit)\r\n\r\n    ? props.persons\r\n    : props.persons.filter(person => person.name.toLowerCase().includes(props.newFilter.toLowerCase())) // muutetaan kaikki pieniksi kirjaimiksi niin ei oo kirjainkoolla väliä\r\n\r\n\r\n\r\n    return (\r\n        <div>\r\n        {personsToShow.map(tyyppi =>\r\n            <li className ='person' key = {tyyppi.id}>{tyyppi.name}  {tyyppi.number} <button onClick = {deletePerson.bind(this, tyyppi.id)}>  delete  </button> </li>\r\n           \r\n                 \r\n     )} \r\n      </div>\r\n    )\r\n  }\r\n\r\n  export default Person","import React from 'react'\r\n\r\nconst ErrorNotification = ({ message }) => {\r\n\r\n  if (message === null) {\r\n    return null\r\n  } else {\r\n\r\n    console.log('message  ' , message)\r\n  return (\r\n    <div className=\"error\">\r\n      {message}\r\n    </div>\r\n  )\r\n} \r\n}\r\n\r\n\r\n\r\n\r\n\r\nexport default ErrorNotification","import React from 'react'\r\n\r\nconst SuccesfullNotification = ({ message }) => {\r\n  \r\n  if (message === null) {\r\n    return null\r\n  } else {\r\n\r\n    console.log('message  ' , message)\r\n  return (\r\n    <div className=\"succesfull\">\r\n      {message}\r\n    </div>\r\n  )\r\n} \r\n}\r\n\r\n\r\n\r\n\r\nexport default SuccesfullNotification","import React, { useEffect, useState } from 'react'\r\nimport Clear from './components/Clear'\r\nimport Filter from './components/Filter'\r\nimport AddPerson from './components/AddPerson'\r\nimport Person from './components/Person'\r\nimport ErrorNotification from './components/ErrorNotification'\r\nimport SuccesfullNotification from './components/SuccesfullNotification'\r\nimport axios from 'axios'\r\n\r\n\r\n\r\nconst App = () => {\r\n  \r\n  const [ persons, setPersons ] = useState([])   // tässä on lista henkilöistä jotka ovat puhelinluettelossa, aluksi tyhjä\r\n  const [ newPerson, setNewPerson ] = useState()  // tätä tarvitaan uuden henkilön  nimen lisäämiseen\r\n  const [ newNumber, setNewNumber ] = useState()  // tätä tarvitraan uuden henkilön numeron lisäämiseen\r\n  const [ newFilter, setFilter ] = useState('')  // tässä on filtteri\r\n  const [ errorMessage, setErrorMessage] = useState(null)  // passaa nämä ADDD:lle, deletelle ym\r\n  const [ succesfullOperation, setSuccesfullOperation] = useState(null)\r\n \r\nconst baseUrl = '/api/persons'\r\nuseEffect(() =>{\r\n  axios\r\n  .get(baseUrl)\r\n  .then(response => {\r\n    setPersons(response.data)\r\n  })\r\n\r\n},[])\r\n\r\n  return (\r\n    <div>\r\n      <h1>Phonebook:</h1>  \r\n      <ErrorNotification message = {errorMessage}/>   \r\n      <SuccesfullNotification message = {succesfullOperation}/> \r\n       <Filter setFilter = {setFilter} />    \r\n      <h1>Add a new:</h1>\r\n         <AddPerson persons = {persons} setPersons = {setPersons} newPerson = {newPerson} setNewPerson = {setNewPerson}\r\n          newNumber = {newNumber} setNewNumber = {setNewNumber} errorMessage = {errorMessage} setErrorMessage = {setErrorMessage}\r\n          succesfullOperation = {succesfullOperation} setSuccesfullOperation = {setSuccesfullOperation}/>\r\n\r\n      <h2>Numbers:</h2>\r\n          <Person  setPersons ={setPersons} newFilter = {newFilter} persons = {persons} errorMessage = {errorMessage} setErrorMessage = {setErrorMessage} />\r\n          <p>---------------------------------------</p>\r\n          <Clear persons = {persons} setPersons = {setPersons} newPerson = {newPerson} setNewPerson = {setNewPerson} newNumber = {newNumber} setNewNumber = {setNewNumber}/>\r\n    </div>\r\n  )\r\n\r\n}\r\n\r\n\r\nexport default App","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\n\r\nReactDOM.render(<App />, document.getElementById('root'))"],"sourceRoot":""}