{"ast":null,"code":"var _jsxFileName = \"C:\\\\FullStack2021\\\\osa2\\\\puhelinluettelo\\\\src\\\\components\\\\Person.js\";\nimport personService from '../services/persons';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Person = props => {\n  // printtaa henkilöt ja niiden numerot\n  const setPersons = props.setPersons;\n\n  const fetchAll = () => {\n    personService.getAll().then(initialPersons => {\n      setPersons(initialPersons); // haetaan henkilöt databasesta\n    });\n  };\n\n  fetchAll();\n\n  const deletePerson = id => {\n    if (typeof id !== 'undefined') {\n      const newList = props.persons.filter(person => person.id !== id);\n      personService.deletePerson(id).then(deletedPerson => {\n        setPersons(props.persons.map(person => person.id !== id || person.name !== '' ? person : deletedPerson));\n      });\n      props.setPersons(newList);\n      fetchAll();\n    } else {\n      console.log('nothign to remove');\n    }\n  };\n\n  const personsToShow = false // filtteröidään, joko näytetään kaikki, tai näytetään filtteröity lista > person.name sisältää (filtterin setit)\n  ? props.persons : props.persons.filter(person => person.name.toLowerCase().includes(props.newFilter.toLowerCase())); // muutetaan kaikki pieniksi kirjaimiksi niin ei oo kirjainkoolla väliä\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: personsToShow.map(tyyppi => /*#__PURE__*/_jsxDEV(\"li\", {\n      ket: tyyppi.id,\n      children: [\" \", tyyppi.name, \"  \", tyyppi.number, \"   \", /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: deletePerson.bind(this, tyyppi.id),\n        children: \"  delete  \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 69\n      }, this), \" \", tyyppi.id]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 9\n  }, this);\n};\n\n_c = Person;\nexport default Person;\n\nvar _c;\n\n$RefreshReg$(_c, \"Person\");","map":{"version":3,"sources":["C:/FullStack2021/osa2/puhelinluettelo/src/components/Person.js"],"names":["personService","Person","props","setPersons","fetchAll","getAll","then","initialPersons","deletePerson","id","newList","persons","filter","person","deletedPerson","map","name","console","log","personsToShow","toLowerCase","includes","newFilter","tyyppi","number","bind"],"mappings":";AAAA,OAAOA,aAAP,MAA0B,qBAA1B;;;AAGA,MAAMC,MAAM,GAAIC,KAAD,IAAW;AAAG;AAC3B,QAAMC,UAAU,GAAGD,KAAK,CAACC,UAAzB;;AACE,QAAMC,QAAQ,GAAG,MAAK;AAClBJ,IAAAA,aAAa,CACVK,MADH,GAEGC,IAFH,CAEQC,cAAc,IAAI;AACtBJ,MAAAA,UAAU,CAACI,cAAD,CAAV,CADsB,CACM;AAE/B,KALD;AASH,GAVD;;AAWAH,EAAAA,QAAQ;;AAGR,QAAMI,YAAY,GAAIC,EAAD,IAAQ;AAC3B,QAAI,OAAOA,EAAP,KAAe,WAAnB,EAAgC;AAChC,YAAMC,OAAO,GAAGR,KAAK,CAACS,OAAN,CAAcC,MAAd,CAAsBC,MAAD,IAAYA,MAAM,CAACJ,EAAP,KAAcA,EAA/C,CAAhB;AAEAT,MAAAA,aAAa,CACZQ,YADD,CACcC,EADd,EAECH,IAFD,CAEMQ,aAAa,IAAI;AACrBX,QAAAA,UAAU,CAACD,KAAK,CAACS,OAAN,CAAcI,GAAd,CAAkBF,MAAM,IAAIA,MAAM,CAACJ,EAAP,KAAcA,EAAd,IAAoBI,MAAM,CAACG,IAAP,KAAgB,EAApC,GAAyCH,MAAzC,GAAkDC,aAA9E,CAAD,CAAV;AAED,OALD;AAMAZ,MAAAA,KAAK,CAACC,UAAN,CAAiBO,OAAjB;AACAN,MAAAA,QAAQ;AAGT,KAbC,MAaK;AACLa,MAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ;AACD;AAEA,GAlBD;;AAoBA,QAAMC,aAAa,GAAG,MAAU;AAAV,IAEpBjB,KAAK,CAACS,OAFc,GAGpBT,KAAK,CAACS,OAAN,CAAcC,MAAd,CAAqBC,MAAM,IAAIA,MAAM,CAACG,IAAP,CAAYI,WAAZ,GAA0BC,QAA1B,CAAmCnB,KAAK,CAACoB,SAAN,CAAgBF,WAAhB,EAAnC,CAA/B,CAHF,CApCsB,CAuC8E;;AAQpG,sBACI;AAAA,cACCD,aAAa,CAACJ,GAAd,CAAkBQ,MAAM,iBACrB;AAAI,MAAA,GAAG,EAAIA,MAAM,CAACd,EAAlB;AAAA,sBAAwBc,MAAM,CAACP,IAA/B,QAAuCO,MAAM,CAACC,MAA9C,sBAAwD;AAAQ,QAAA,OAAO,EAAIhB,YAAY,CAACiB,IAAb,CAAkB,IAAlB,EAAwBF,MAAM,CAACd,EAA/B,CAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAxD,OAAoIc,MAAM,CAACd,EAA3I;AAAA;AAAA;AAAA;AAAA;AAAA,YADH;AADD;AAAA;AAAA;AAAA;AAAA,UADJ;AASD,CAxDH;;KAAMR,M;AA0DJ,eAAeA,MAAf","sourcesContent":["import personService from '../services/persons'\r\n\r\n\r\nconst Person = (props) => {  // printtaa henkilöt ja niiden numerot\r\n  const setPersons = props.setPersons\r\n    const fetchAll = () =>{\r\n        personService\r\n          .getAll()\r\n          .then(initialPersons => {\r\n            setPersons(initialPersons)  // haetaan henkilöt databasesta\r\n            \r\n        })\r\n        \r\n      \r\n\r\n    }\r\n    fetchAll();\r\n   \r\n\r\n    const deletePerson = (id) => {\r\n      if (typeof(id) !== 'undefined') {\r\n      const newList = props.persons.filter((person) => person.id !== id);\r\n\r\n      personService\r\n      .deletePerson(id)\r\n      .then(deletedPerson => {\r\n        setPersons(props.persons.map(person => person.id !== id || person.name !== '' ? person : deletedPerson))\r\n    \r\n      })\r\n      props.setPersons(newList)\r\n      fetchAll();\r\n      \r\n\r\n    } else {\r\n      console.log('nothign to remove')\r\n    }\r\n      \r\n    }\r\n    \r\n    const personsToShow = false     // filtteröidään, joko näytetään kaikki, tai näytetään filtteröity lista > person.name sisältää (filtterin setit)\r\n\r\n    ? props.persons\r\n    : props.persons.filter(person => person.name.toLowerCase().includes(props.newFilter.toLowerCase())) // muutetaan kaikki pieniksi kirjaimiksi niin ei oo kirjainkoolla väliä\r\n\r\n\r\n  \r\n\r\n \r\n    \r\n\r\n    return (\r\n        <div>\r\n        {personsToShow.map(tyyppi =>\r\n            <li ket = {tyyppi.id}> {tyyppi.name}  {tyyppi.number}   <button onClick = {deletePerson.bind(this, tyyppi.id)}>  delete  </button> {tyyppi.id}</li>\r\n           \r\n                 \r\n     )} \r\n      </div>\r\n    )\r\n  }\r\n\r\n  export default Person"]},"metadata":{},"sourceType":"module"}