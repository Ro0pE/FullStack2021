{"ast":null,"code":"var _jsxFileName = \"C:\\\\FullStack2021\\\\osa2\\\\puhelinluettelo\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  _s();\n\n  const [persons, setPersons] = useState([// tässä on lista henkilöistä jotka ovat puhelinluettelossa\n  {\n    name: 'Arto Hellas',\n    numero: '040-123456'\n  }, {\n    name: 'Ada Lovelace',\n    numero: '39-44-5323523'\n  }, {\n    name: 'Dan Abramov',\n    numero: '12-43-234345'\n  }, {\n    name: 'Mary Poppendieck',\n    numero: '39-23-6423122'\n  }]);\n  const [newPerson, setNewPerson] = useState(); // tätä tarvitaan uuden henkilön  nimen lisäämiseen\n\n  const [newNumber, setNewNumber] = useState(); // tätä tarvitraan uuden henkilön numeron lisäämiseen\n\n  const [newFilter, setFilter] = useState(''); // tässä on filtteri\n\n  const personsToShow = false // filtteröidään, joko näytetään kaikki, tai näytetään filtteröity lista > person.name sisältää (filtterin setit)\n  ? persons : persons.filter(person => person.name.toLocaleLowerCase.includes(newFilter.toLocaleLowerCase)); //toLowerCase().includes(newFilter.toLowerCase()))\n\n  const addPerson = event => {\n    event.preventDefault();\n    const personObject = {\n      name: newPerson,\n      numero: newNumber,\n      id: persons.length + 1\n    };\n    var listalla = false;\n\n    for (let i = 0; i < persons.length; i++) {\n      if (!(persons[i].name === personObject.name)) {\n        listalla = false;\n      } else {\n        listalla = true;\n        alert(`Person ${personObject.name} is already added to phonebook.`);\n      }\n    }\n\n    if (!(listalla === true)) {\n      setPersons(persons.concat(personObject));\n    }\n\n    listalla = false;\n  };\n\n  const handleAddPerson = event => {\n    // lisää henkilölle nimi\n    console.log(event.target.value);\n    setNewPerson(event.target.value);\n  };\n\n  const handleAddNumber = event => {\n    // lisää henkilölle numero\n    console.log(event.target.value);\n    setNewNumber(event.target.value);\n  };\n\n  const clear = () => {\n    // tyhjennä lista\n    setPersons([]);\n  };\n\n  const setFilterValue = event => {\n    // aseta filtterin value\n    setFilter(event.target.value); //\n    //   console.log(newFilter)\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Phonebook\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"filter shown with: \", /*#__PURE__*/_jsxDEV(\"input\", {\n        onChange: setFilterValue\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 28\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Add a new\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: addPerson,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\" name: \", /*#__PURE__*/_jsxDEV(\"input\", {\n            onChange: handleAddPerson\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"number: \", /*#__PURE__*/_jsxDEV(\"input\", {\n            onChange: handleAddNumber\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 22\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          children: \"add\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"submit\",\n      onClick: clear,\n      children: \"Clear!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Numbers\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this), personsToShow.map(tyyppi => /*#__PURE__*/_jsxDEV(Person, {\n      henkilo: tyyppi\n    }, tyyppi.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 11\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"TvQ4M6RVCl2gN40iZXS9tnaaFiw=\");\n\n_c = App;\n\nconst Person = ({\n  henkilo\n}) => {\n  // printtaa henkilöt ja niiden numerot\n  return /*#__PURE__*/_jsxDEV(\"li\", {\n    children: [henkilo.name, \" \", henkilo.numero]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 114,\n    columnNumber: 5\n  }, this);\n};\n\n_c2 = Person;\nexport default App;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"App\");\n$RefreshReg$(_c2, \"Person\");","map":{"version":3,"sources":["C:/FullStack2021/osa2/puhelinluettelo/src/App.js"],"names":["React","useState","App","persons","setPersons","name","numero","newPerson","setNewPerson","newNumber","setNewNumber","newFilter","setFilter","personsToShow","filter","person","toLocaleLowerCase","includes","addPerson","event","preventDefault","personObject","id","length","listalla","i","alert","concat","handleAddPerson","console","log","target","value","handleAddNumber","clear","setFilterValue","map","tyyppi","Person","henkilo"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\n\nconst App = () => {\n\n\n\n  const [ persons, setPersons] = useState([   // tässä on lista henkilöistä jotka ovat puhelinluettelossa\n    { name: 'Arto Hellas', numero: '040-123456'},\n    { name: 'Ada Lovelace', numero: '39-44-5323523' },\n    { name: 'Dan Abramov', numero: '12-43-234345' },\n    { name: 'Mary Poppendieck', numero: '39-23-6423122' }\n  ])\n  const [ newPerson, setNewPerson ] = useState()  // tätä tarvitaan uuden henkilön  nimen lisäämiseen\n  const [ newNumber, setNewNumber ] = useState()  // tätä tarvitraan uuden henkilön numeron lisäämiseen\n  const [newFilter, setFilter] = useState('')  // tässä on filtteri\n\n\n  const personsToShow = false     // filtteröidään, joko näytetään kaikki, tai näytetään filtteröity lista > person.name sisältää (filtterin setit)\n  ? persons\n  : persons.filter(person => person.name.toLocaleLowerCase.includes(newFilter.toLocaleLowerCase))\n    \n    //toLowerCase().includes(newFilter.toLowerCase()))\n \n\n\n\n  const addPerson = (event) => {  \n    event.preventDefault()\n    const personObject = {\n      name: newPerson,\n      numero: newNumber, \n      id: persons.length +1   \n    }\n    var listalla = false;\n    for (let  i = 0; i < persons.length; i++){\n\n     if (!(persons[i].name === personObject.name)){\n       listalla = false;\n       \n       \n     } else {\n       listalla = true;\n      alert(`Person ${personObject.name} is already added to phonebook.`)\n \n     }\n     \n  \n    }\n    if (!(listalla === true)){\n      setPersons(persons.concat(personObject))\n    }\n    listalla = false;\n  \n  }\n\n  const handleAddPerson = (event) => {  // lisää henkilölle nimi\n    console.log(event.target.value)\n    setNewPerson(event.target.value)\n \n  }\n  const handleAddNumber = (event) => {  // lisää henkilölle numero\n    console.log(event.target.value)\n    setNewNumber(event.target.value)\n \n  }\n\n\n  const clear = () => {  // tyhjennä lista\n    setPersons([])\n  }\n\n  const setFilterValue = (event) => {  // aseta filtterin value\n    setFilter(event.target.value)\n\n    \n    //\n //   console.log(newFilter)\n  }\n  \n\n\n  \n  return (\n    <div>\n      <h2>Phonebook</h2>\n        <div>\n        filter shown with: <input onChange={setFilterValue}/>      \n        </div>\n      <h2>Add a new</h2>\n      <form onSubmit = {addPerson}>\n        <div>\n          <p> name: <input onChange={handleAddPerson}/></p> \n          <p>number: <input onChange={handleAddNumber}/></p>\n          <button type=\"submit\">add</button>\n        </div>\n        <ul>\n\n        </ul>\n      </form>\n\n      <button type=\"submit\" onClick = {clear}>Clear!</button>\n      \n\n      <h2>Numbers</h2>\n      {personsToShow.map(tyyppi =>\n          <Person key={tyyppi.id}  henkilo={tyyppi} />\n        )}\n    </div>\n  )\n\n}\nconst Person = ({ henkilo }) => {  // printtaa henkilöt ja niiden numerot\n  return (\n    <li>{henkilo.name} {henkilo.numero}</li>\n  )\n}\n\n\nexport default App"]},"metadata":{},"sourceType":"module"}