{"ast":null,"code":"var _jsxFileName = \"C:\\\\FullStack2021\\\\osa2\\\\puhelinluettelo\\\\src\\\\components\\\\Person.js\";\nimport personService from '../services/persons';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Person = props => {\n  // printtaa henkilöt ja niiden numerot\n  const setErrorMessage = props.setErrorMessage;\n\n  const deletePerson = id => {\n    if (typeof id !== 'undefined') {\n      const newList = props.persons.filter(person => person.id !== id);\n      console.log(newList);\n      personService.deletePerson(id).then(deletedPerson => {\n        props.setPersons(newList);\n      }).catch(error => {\n        setErrorMessage(`Note '${id.name}' was already removed from server`);\n        setTimeout(() => {\n          setErrorMessage(null);\n        }, 5000);\n      });\n    }\n  };\n\n  const personsToShow = false // filtteröidään, joko näytetään kaikki, tai näytetään filtteröity lista > person.name sisältää (filtterin setit)\n  ? props.persons : props.persons.filter(person => person.name.toLowerCase().includes(props.newFilter.toLowerCase())); // muutetaan kaikki pieniksi kirjaimiksi niin ei oo kirjainkoolla väliä\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: personsToShow.map(tyyppi => /*#__PURE__*/_jsxDEV(\"li\", {\n      className: \"person\",\n      children: [tyyppi.name, \"  \", tyyppi.number, \"  --------- \", /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: deletePerson.bind(this, tyyppi.id),\n        children: \"  delete  \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 97\n      }, this), \" \"]\n    }, tyyppi.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 9\n  }, this);\n};\n\n_c = Person;\nexport default Person;\n\nvar _c;\n\n$RefreshReg$(_c, \"Person\");","map":{"version":3,"sources":["C:/FullStack2021/osa2/puhelinluettelo/src/components/Person.js"],"names":["personService","Person","props","setErrorMessage","deletePerson","id","newList","persons","filter","person","console","log","then","deletedPerson","setPersons","catch","error","name","setTimeout","personsToShow","toLowerCase","includes","newFilter","map","tyyppi","number","bind"],"mappings":";AAAA,OAAOA,aAAP,MAA0B,qBAA1B;;;AAEA,MAAMC,MAAM,GAAIC,KAAD,IAAW;AAAG;AACzB,QAAMC,eAAe,GAAGD,KAAK,CAACC,eAA9B;;AAGA,QAAMC,YAAY,GAAIC,EAAD,IAAQ;AAC3B,QAAI,OAAOA,EAAP,KAAe,WAAnB,EAAgC;AAChC,YAAMC,OAAO,GAAGJ,KAAK,CAACK,OAAN,CAAcC,MAAd,CAAsBC,MAAD,IAAYA,MAAM,CAACJ,EAAP,KAAcA,EAA/C,CAAhB;AACAK,MAAAA,OAAO,CAACC,GAAR,CAAYL,OAAZ;AAEAN,MAAAA,aAAa,CACZI,YADD,CACcC,EADd,EAECO,IAFD,CAEMC,aAAa,IAAI;AACrBX,QAAAA,KAAK,CAACY,UAAN,CAAiBR,OAAjB;AAED,OALD,EAMCS,KAND,CAMOC,KAAK,IAAI;AACdb,QAAAA,eAAe,CACZ,SAAQE,EAAE,CAACY,IAAK,mCADJ,CAAf;AAGAC,QAAAA,UAAU,CAAC,MAAM;AACff,UAAAA,eAAe,CAAC,IAAD,CAAf;AACD,SAFS,EAEP,IAFO,CAAV;AAGD,OAbD;AAeD;AAEA,GAtBD;;AAwBA,QAAMgB,aAAa,GAAG,MAAU;AAAV,IAEpBjB,KAAK,CAACK,OAFc,GAGpBL,KAAK,CAACK,OAAN,CAAcC,MAAd,CAAqBC,MAAM,IAAIA,MAAM,CAACQ,IAAP,CAAYG,WAAZ,GAA0BC,QAA1B,CAAmCnB,KAAK,CAACoB,SAAN,CAAgBF,WAAhB,EAAnC,CAA/B,CAHF,CA5BsB,CA+B8E;;AAIpG,sBACI;AAAA,cACCD,aAAa,CAACI,GAAd,CAAkBC,MAAM,iBACrB;AAAI,MAAA,SAAS,EAAE,QAAf;AAAA,iBAA2CA,MAAM,CAACP,IAAlD,QAA0DO,MAAM,CAACC,MAAjE,+BAAoF;AAAQ,QAAA,OAAO,EAAIrB,YAAY,CAACsB,IAAb,CAAkB,IAAlB,EAAwBF,MAAM,CAACnB,EAA/B,CAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAApF;AAAA,OAA+BmB,MAAM,CAACnB,EAAtC;AAAA;AAAA;AAAA;AAAA,YADH;AADD;AAAA;AAAA;AAAA;AAAA,UADJ;AASD,CA5CH;;KAAMJ,M;AA8CJ,eAAeA,MAAf","sourcesContent":["import personService from '../services/persons'\r\n\r\nconst Person = (props) => {  // printtaa henkilöt ja niiden numerot\r\n    const setErrorMessage = props.setErrorMessage\r\n\r\n\r\n    const deletePerson = (id) => {\r\n      if (typeof(id) !== 'undefined') {\r\n      const newList = props.persons.filter((person) => person.id !== id);\r\n      console.log(newList)\r\n\r\n      personService\r\n      .deletePerson(id)\r\n      .then(deletedPerson => {\r\n        props.setPersons(newList)\r\n    \r\n      })\r\n      .catch(error => {\r\n        setErrorMessage(\r\n          `Note '${id.name}' was already removed from server`\r\n        )\r\n        setTimeout(() => {\r\n          setErrorMessage(null)\r\n        }, 5000)\r\n      })    \r\n\r\n    } \r\n      \r\n    }\r\n    \r\n    const personsToShow = false     // filtteröidään, joko näytetään kaikki, tai näytetään filtteröity lista > person.name sisältää (filtterin setit)\r\n\r\n    ? props.persons\r\n    : props.persons.filter(person => person.name.toLowerCase().includes(props.newFilter.toLowerCase())) // muutetaan kaikki pieniksi kirjaimiksi niin ei oo kirjainkoolla väliä\r\n\r\n\r\n\r\n    return (\r\n        <div>\r\n        {personsToShow.map(tyyppi =>\r\n            <li className ='person' key = {tyyppi.id}>{tyyppi.name}  {tyyppi.number}  --------- <button onClick = {deletePerson.bind(this, tyyppi.id)}>  delete  </button> </li>\r\n           \r\n                 \r\n     )} \r\n      </div>\r\n    )\r\n  }\r\n\r\n  export default Person"]},"metadata":{},"sourceType":"module"}