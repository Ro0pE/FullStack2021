{"ast":null,"code":"var _jsxFileName = \"C:\\\\FullStack2021\\\\osa2\\\\puhelinluettelo\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport Clear from './components/Clear';\nimport Filter from './components/Filter';\nimport AddPerson from './components/AddPerson';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  _s();\n\n  const [persons, setPersons] = useState([]); // tässä on lista henkilöistä jotka ovat puhelinluettelossa, aluksi tyhjä\n\n  const [newPerson, setNewPerson] = useState(); // tätä tarvitaan uuden henkilön  nimen lisäämiseen\n\n  const [newNumber, setNewNumber] = useState(); // tätä tarvitraan uuden henkilön numeron lisäämiseen\n\n  const [newFilter, setFilter] = useState(''); // tässä on filtteri\n\n  const personsToShow = false // filtteröidään, joko näytetään kaikki, tai näytetään filtteröity lista > person.name sisältää (filtterin setit)\n  ? persons : persons.filter(person => person.name.toLocaleLowerCase().includes(newFilter.toLowerCase())); // muutetaan kaikki pieniksi kirjaimiksi niin ei oo kirjainkoolla väliä\n\n  const setFilterValue = event => {\n    // aseta filtterin value\n    setFilter(event.target.value);\n  };\n\n  const addPerson = event => {\n    // lisätään henkilö, nimi,numero ja id\n    event.preventDefault();\n    const personObject = {\n      // uutta objektia tuosta\n      name: newPerson,\n      numero: newNumber,\n      id: persons.length + 1\n    };\n    var listalla = false; // \n\n    for (let i = 0; i < persons.length; i++) {\n      if (!(persons[i].name === personObject.name)) {\n        // tutkitaan, onko henkilö jo puhelinluettelossa. Jos ei, niin lisätään ja jos on niin alerttia perään\n        listalla = false;\n      } else {\n        listalla = true;\n        alert(`Person ${personObject.name} is already added to phonebook.`);\n      }\n    }\n\n    if (!(listalla === true)) {\n      setPersons(persons.concat(personObject));\n    }\n\n    listalla = false;\n  };\n\n  const handleAddPerson = event => {\n    // lisää henkilölle nimi\n    console.log(event.target.value);\n    setNewPerson(event.target.value);\n  };\n\n  const handleAddNumber = event => {\n    // lisää henkilölle numero\n    console.log(event.target.value);\n    setNewNumber(event.target.value);\n  }; // const clear = () => {  // tyhjennä lista\n  //   setPersons([])\n  // }\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Phonebook\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(Filter, {\n        personsToShow: personsToShow,\n        persons: persons,\n        newFilter: newFilter,\n        setFilter: setFilter\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Add a new\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: addPerson,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\" name: \", /*#__PURE__*/_jsxDEV(\"input\", {\n            onChange: handleAddPerson\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"number: \", /*#__PURE__*/_jsxDEV(\"input\", {\n            onChange: handleAddNumber\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 22\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          children: \"add\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Clear, {\n      setPersons: setPersons\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Numbers\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this), personsToShow.map(tyyppi => /*#__PURE__*/_jsxDEV(Person, {\n      henkilo: tyyppi\n    }, tyyppi.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 11\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"dqfjpLJLlsmtxdJjajY0QRQ5Q2E=\");\n\n_c = App;\n\nconst Person = ({\n  henkilo\n}) => {\n  // printtaa henkilöt ja niiden numerot\n  return /*#__PURE__*/_jsxDEV(\"li\", {\n    children: [henkilo.name, \" \", henkilo.numero]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 101,\n    columnNumber: 5\n  }, this);\n};\n\n_c2 = Person;\nexport default App;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"App\");\n$RefreshReg$(_c2, \"Person\");","map":{"version":3,"sources":["C:/FullStack2021/osa2/puhelinluettelo/src/App.js"],"names":["React","useState","Clear","Filter","AddPerson","App","persons","setPersons","newPerson","setNewPerson","newNumber","setNewNumber","newFilter","setFilter","personsToShow","filter","person","name","toLocaleLowerCase","includes","toLowerCase","setFilterValue","event","target","value","addPerson","preventDefault","personObject","numero","id","length","listalla","i","alert","concat","handleAddPerson","console","log","handleAddNumber","map","tyyppi","Person","henkilo"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AACA,OAAOC,MAAP,MAAmB,qBAAnB;AACA,OAAOC,SAAP,MAAsB,wBAAtB;;;AAEA,MAAMC,GAAG,GAAG,MAAM;AAAA;;AAEhB,QAAM,CAAEC,OAAF,EAAWC,UAAX,IAA0BN,QAAQ,CAAC,EAAD,CAAxC,CAFgB,CAE+B;;AAC/C,QAAM,CAAEO,SAAF,EAAaC,YAAb,IAA8BR,QAAQ,EAA5C,CAHgB,CAGgC;;AAChD,QAAM,CAAES,SAAF,EAAaC,YAAb,IAA8BV,QAAQ,EAA5C,CAJgB,CAIgC;;AAChD,QAAM,CAAEW,SAAF,EAAaC,SAAb,IAA2BZ,QAAQ,CAAC,EAAD,CAAzC,CALgB,CAK+B;;AAG/C,QAAMa,aAAa,GAAG,MAAU;AAAV,IACpBR,OADoB,GAEpBA,OAAO,CAACS,MAAR,CAAeC,MAAM,IAAIA,MAAM,CAACC,IAAP,CAAYC,iBAAZ,GAAgCC,QAAhC,CAAyCP,SAAS,CAACQ,WAAV,EAAzC,CAAzB,CAFF,CARgB,CAU+E;;AAE/F,QAAMC,cAAc,GAAIC,KAAD,IAAW;AAAG;AACnCT,IAAAA,SAAS,CAACS,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAT;AACD,GAFD;;AAMA,QAAMC,SAAS,GAAIH,KAAD,IAAW;AAAI;AAC/BA,IAAAA,KAAK,CAACI,cAAN;AACA,UAAMC,YAAY,GAAG;AAAG;AACtBV,MAAAA,IAAI,EAAET,SADa;AAEnBoB,MAAAA,MAAM,EAAElB,SAFW;AAGnBmB,MAAAA,EAAE,EAAEvB,OAAO,CAACwB,MAAR,GAAgB;AAHD,KAArB;AAKA,QAAIC,QAAQ,GAAG,KAAf,CAP2B,CAOJ;;AACvB,SAAK,IAAKC,CAAC,GAAG,CAAd,EAAiBA,CAAC,GAAG1B,OAAO,CAACwB,MAA7B,EAAqCE,CAAC,EAAtC,EAAyC;AAExC,UAAI,EAAE1B,OAAO,CAAC0B,CAAD,CAAP,CAAWf,IAAX,KAAoBU,YAAY,CAACV,IAAnC,CAAJ,EAA6C;AAAG;AAC9Cc,QAAAA,QAAQ,GAAG,KAAX;AAED,OAHD,MAGO;AACLA,QAAAA,QAAQ,GAAG,IAAX;AACDE,QAAAA,KAAK,CAAE,UAASN,YAAY,CAACV,IAAK,iCAA7B,CAAL;AAEA;AAGD;;AACD,QAAI,EAAEc,QAAQ,KAAK,IAAf,CAAJ,EAAyB;AACvBxB,MAAAA,UAAU,CAACD,OAAO,CAAC4B,MAAR,CAAeP,YAAf,CAAD,CAAV;AACD;;AACDI,IAAAA,QAAQ,GAAG,KAAX;AAED,GA1BD;;AA4BA,QAAMI,eAAe,GAAIb,KAAD,IAAW;AAAG;AACpCc,IAAAA,OAAO,CAACC,GAAR,CAAYf,KAAK,CAACC,MAAN,CAAaC,KAAzB;AACAf,IAAAA,YAAY,CAACa,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAZ;AAED,GAJD;;AAKA,QAAMc,eAAe,GAAIhB,KAAD,IAAW;AAAG;AACpCc,IAAAA,OAAO,CAACC,GAAR,CAAYf,KAAK,CAACC,MAAN,CAAaC,KAAzB;AACAb,IAAAA,YAAY,CAACW,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAZ;AAED,GAJD,CAnDgB,CA0DjB;AACA;AACA;;;AAOC,sBACE;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEI;AAAA,6BACE,QAAC,MAAD;AAAQ,QAAA,aAAa,EAAIV,aAAzB;AAAwC,QAAA,OAAO,EAAIR,OAAnD;AAA4D,QAAA,SAAS,EAAIM,SAAzE;AAAoF,QAAA,SAAS,EAAIC;AAAjG;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YAFJ,eAKE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YALF,eAME;AAAM,MAAA,QAAQ,EAAIY,SAAlB;AAAA,8BACE;AAAA,gCACE;AAAA,6CAAU;AAAO,YAAA,QAAQ,EAAEU;AAAjB;AAAA;AAAA;AAAA;AAAA,kBAAV;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE;AAAA,8CAAW;AAAO,YAAA,QAAQ,EAAEG;AAAjB;AAAA;AAAA;AAAA;AAAA,kBAAX;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFF,eAGE;AAAQ,UAAA,IAAI,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAHF;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAME;AAAA;AAAA;AAAA;AAAA,cANF;AAAA;AAAA;AAAA;AAAA;AAAA,YANF,eAgBE,QAAC,KAAD;AAAO,MAAA,UAAU,EAAI/B;AAArB;AAAA;AAAA;AAAA;AAAA,YAhBF,eAiBE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAjBF,EAkBGO,aAAa,CAACyB,GAAd,CAAkBC,MAAM,iBACrB,QAAC,MAAD;AAAyB,MAAA,OAAO,EAAEA;AAAlC,OAAaA,MAAM,CAACX,EAApB;AAAA;AAAA;AAAA;AAAA,YADH,CAlBH;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAyBD,CA5FD;;GAAMxB,G;;KAAAA,G;;AA6FN,MAAMoC,MAAM,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAiB;AAAG;AACjC,sBACE;AAAA,eAAKA,OAAO,CAACzB,IAAb,OAAoByB,OAAO,CAACd,MAA5B;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAGD,CAJD;;MAAMa,M;AAON,eAAepC,GAAf","sourcesContent":["import React, { useState } from 'react'\nimport Clear from './components/Clear'\nimport Filter from './components/Filter'\nimport AddPerson from './components/AddPerson'\n\nconst App = () => {\n\n  const [ persons, setPersons ] = useState([])   // tässä on lista henkilöistä jotka ovat puhelinluettelossa, aluksi tyhjä\n  const [ newPerson, setNewPerson ] = useState()  // tätä tarvitaan uuden henkilön  nimen lisäämiseen\n  const [ newNumber, setNewNumber ] = useState()  // tätä tarvitraan uuden henkilön numeron lisäämiseen\n  const [ newFilter, setFilter ] = useState('')  // tässä on filtteri\n\n\n  const personsToShow = false     // filtteröidään, joko näytetään kaikki, tai näytetään filtteröity lista > person.name sisältää (filtterin setit)\n  ? persons\n  : persons.filter(person => person.name.toLocaleLowerCase().includes(newFilter.toLowerCase()))  // muutetaan kaikki pieniksi kirjaimiksi niin ei oo kirjainkoolla väliä\n\n  const setFilterValue = (event) => {  // aseta filtterin value\n    setFilter(event.target.value)\n  }\n    \n\n\n  const addPerson = (event) => {   // lisätään henkilö, nimi,numero ja id\n    event.preventDefault()\n    const personObject = {  // uutta objektia tuosta\n      name: newPerson,\n      numero: newNumber, \n      id: persons.length +1   \n    }\n    var listalla = false;  // \n    for (let  i = 0; i < persons.length; i++){\n\n     if (!(persons[i].name === personObject.name)){  // tutkitaan, onko henkilö jo puhelinluettelossa. Jos ei, niin lisätään ja jos on niin alerttia perään\n       listalla = false;\n   \n     } else {\n       listalla = true;\n      alert(`Person ${personObject.name} is already added to phonebook.`)\n \n     }\n     \n  \n    }\n    if (!(listalla === true)){\n      setPersons(persons.concat(personObject))\n    }\n    listalla = false;\n  \n  }\n\n  const handleAddPerson = (event) => {  // lisää henkilölle nimi\n    console.log(event.target.value)\n    setNewPerson(event.target.value)\n \n  }\n  const handleAddNumber = (event) => {  // lisää henkilölle numero\n    console.log(event.target.value)\n    setNewNumber(event.target.value)\n \n  }\n\n\n // const clear = () => {  // tyhjennä lista\n //   setPersons([])\n // }\n\n\n  \n\n\n  \n  return (\n    <div>\n      <h2>Phonebook</h2>\n        <div>\n          <Filter personsToShow = {personsToShow} persons = {persons} newFilter = {newFilter} setFilter = {setFilter} />\n        </div>\n      <h2>Add a new</h2>\n      <form onSubmit = {addPerson}>\n        <div>\n          <p> name: <input onChange={handleAddPerson}/></p> \n          <p>number: <input onChange={handleAddNumber}/></p>\n          <button type=\"submit\">add</button>\n        </div>\n        <ul>\n\n        </ul>\n      </form>\n      <Clear setPersons = {setPersons}/>\n      <h2>Numbers</h2>\n      {personsToShow.map(tyyppi =>\n          <Person key={tyyppi.id}  henkilo={tyyppi} />\n        )}\n    </div>\n  )\n\n}\nconst Person = ({ henkilo }) => {  // printtaa henkilöt ja niiden numerot\n  return (\n    <li>{henkilo.name} {henkilo.numero}</li>\n  )\n}\n\n\nexport default App"]},"metadata":{},"sourceType":"module"}